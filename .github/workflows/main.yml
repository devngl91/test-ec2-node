# name: ClusterDeployAWSDockerPods

# # USAR APENAS 2 BRANCHS ( Prod ) ( Dev )
# on:
#   push:
#     branches: ['main', 'dev']

# #####################################
# #####################################
# # NÃO ALTERAR ABAIXO A PARTIR DAQUI #
# #####################################
# #####################################

# env:
#   AWS_REGION: us-east-1
#   ECS_CLUSTER: NEW
#   ECR_REPOSITORY: ${{ github.ref == 'refs/heads/main' && 'ecr-test-ec2' || 'DEV_ecr-test-ec2' }}
#   ECS_SERVICE: ${{ github.ref == 'refs/heads/main' && 'NEW' || 'DEV_NEW' }}
#   ECS_TASK_DEFINITION: .aws/task-definition.json
#   CONTAINER_NAME: pod
#   WAIT_STABILITY: true # recomendo TRUE, mas pode setar FALSE se quiser nao ter feedback de updates da AWS

name: ClusterDeployAWSDockerPods

# USAR APENAS 2 BRANCHS ( Prod ) ( Dev )
on:
  push:
    branches: ['main', 'dev']

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: painel-py-core
  
  # utilizando o { main } como production, so mude o nome { main } no refs/heads/main
  ECR_REPOSITORY: ${{ github.ref == 'refs/heads/main' && 'painel-py-core' || 'dev_painel-py-core' }}
  ECS_SERVICE: ${{ github.ref == 'refs/heads/main' && 'painel-py-core' || 'dev_painel-py-core' }}
  ECS_TASK_DEFINITION: .aws/task-definition.json
  CONTAINER_NAME: pod

  # recomendo TRUE, mas pode setar FALSE se quiser nao ter feedback de updates da AWS
  WAIT_STABILITY: true 



#####################################
#####################################
# NÃO ALTERAR ABAIXO A PARTIR DAQUI #
#####################################
#####################################


permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Auth repo
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build repo
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update version
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Update task
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: ${{ env.WAIT_STABILITY }}